name: Deploy to Hetzner

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            # Start SSH agent and add keys
            eval "$(ssh-agent -s)"
            echo "${{ secrets.HETZNER_SSH_KEY }}" | ssh-add -
            echo "${{ secrets.AUDIO_ENHANCER_DEPLOY_KEY }}" | ssh-add -

            # Setup project directory
            if [ ! -d "/opt/audio-enhancer" ]; then
                echo "Creating project directory and cloning repository..."
                mkdir -p /opt/audio-enhancer
                cd /opt/audio-enhancer
                
                ssh-keyscan github.com >> ~/.ssh/known_hosts
                git clone git@github.com:Bahmann-Coaching/bahmann-audio-enhancer.git .
                echo "Repository cloned successfully."
            else
                echo "Project directory exists, navigating and pulling latest changes..."
                cd /opt/audio-enhancer
                
                if [ ! -d ".git" ]; then
                    echo "Directory exists but is not a git repository. Using safe initialization..."
                    cd /tmp
                    rm -rf audio-enhancer-temp
                    
                    ssh-add -l
                    ssh-keyscan github.com >> ~/.ssh/known_hosts
                    ssh -T git@github.com || echo "SSH test completed"
                    
                    mkdir -p ~/.ssh
                    cat >> ~/.ssh/config << 'EOF'
            Host github-audio-enhancer
                HostName github.com
                User git
                IdentityFile /tmp/audio_enhancer_deploy_key
                IdentitiesOnly yes
            EOF
                    
                    echo "${{ secrets.AUDIO_ENHANCER_DEPLOY_KEY }}" > /tmp/audio_enhancer_deploy_key
                    chmod 600 /tmp/audio_enhancer_deploy_key
                    
                    git clone git@github-audio-enhancer:Bahmann-Coaching/bahmann-audio-enhancer.git audio-enhancer-temp
                    
                    cp -r audio-enhancer-temp/* /opt/audio-enhancer/
                    cp -r audio-enhancer-temp/.git /opt/audio-enhancer/
                    cp audio-enhancer-temp/.gitignore /opt/audio-enhancer/ 2>/dev/null || true
                    
                    rm -rf audio-enhancer-temp
                    cd /opt/audio-enhancer
                else
                    echo "Pulling latest changes from git..."
                    ssh-keyscan github.com >> ~/.ssh/known_hosts
                    git pull
                fi
            fi

            # Update .env with secrets
            echo "Updating .env with secrets..."
            if [ ! -f .env ]; then
                cp .env.example .env 2>/dev/null || touch .env
            fi
            
            # AI Coustics API Key
            if grep -q "AI_COUSTICS_API_KEY=" .env; then
                sed -i "s|AI_COUSTICS_API_KEY=.*|AI_COUSTICS_API_KEY=${{ secrets.AI_COUSTICS_API_KEY }}|" .env
            else
                echo "AI_COUSTICS_API_KEY=${{ secrets.AI_COUSTICS_API_KEY }}" >> .env
            fi
            
            # Slack Configuration
            if grep -q "SLACK_WEBHOOK_URL=" .env; then
                sed -i "s|SLACK_WEBHOOK_URL=.*|SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}|" .env
            else
                echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}" >> .env
            fi
            
            if grep -q "SLACK_CHANNEL=" .env; then
                sed -i "s|SLACK_CHANNEL=.*|SLACK_CHANNEL=${{ secrets.SLACK_CHANNEL }}|" .env
            else
                echo "SLACK_CHANNEL=${{ secrets.SLACK_CHANNEL }}" >> .env
            fi

            # Server Configuration - nur setzen wenn Secrets vorhanden sind
            if [ -n "${{ secrets.UPLOAD_MAX_SIZE_MB }}" ]; then
                if grep -q "UPLOAD_MAX_SIZE_MB=" .env; then
                    sed -i "s|UPLOAD_MAX_SIZE_MB=.*|UPLOAD_MAX_SIZE_MB=${{ secrets.UPLOAD_MAX_SIZE_MB }}|" .env
                else
                    echo "UPLOAD_MAX_SIZE_MB=${{ secrets.UPLOAD_MAX_SIZE_MB }}" >> .env
                fi
            fi
            
            if [ -n "${{ secrets.STORAGE_DAYS }}" ]; then
                if grep -q "STORAGE_DAYS=" .env; then
                    sed -i "s|STORAGE_DAYS=.*|STORAGE_DAYS=${{ secrets.STORAGE_DAYS }}|" .env
                else
                    echo "STORAGE_DAYS=${{ secrets.STORAGE_DAYS }}" >> .env
                fi
            fi
            
            if [ -n "${{ secrets.MAX_CONCURRENT_ENHANCEMENTS }}" ]; then
                if grep -q "MAX_CONCURRENT_ENHANCEMENTS=" .env; then
                    sed -i "s|MAX_CONCURRENT_ENHANCEMENTS=.*|MAX_CONCURRENT_ENHANCEMENTS=${{ secrets.MAX_CONCURRENT_ENHANCEMENTS }}|" .env
                else
                    echo "MAX_CONCURRENT_ENHANCEMENTS=${{ secrets.MAX_CONCURRENT_ENHANCEMENTS }}" >> .env
                fi
            fi

            # Ensure Docker Compose V2 is installed
            echo "Ensuring Docker Compose V2 is installed..."
            if ! command -v docker compose &> /dev/null
            then
                echo "Docker Compose V2 not found, installing..."
                DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
                mkdir -p $DOCKER_CONFIG/cli-plugins
                curl -SL https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
                chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
                echo "Docker Compose V2 installed."
            else
                echo "Docker Compose V2 already installed."
            fi

            # Create data directories
            mkdir -p data/enhanced
            
            # Docker deployment
            echo "Stopping and removing old containers..."
            docker compose down || true
            echo "Rebuilding and starting docker container..."
            docker compose up -d --build

            # Stop SSH agent
            ssh-agent -k

            echo "Audio Enhancer deployment successful!"